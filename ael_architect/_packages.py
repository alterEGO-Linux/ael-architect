# :----------------------------------------------------------------------- INFO
# :[ael-architect/ael_architect/packages.py]
# :author        : fantomH @alterEGO Linux
# :created       : 2023-12-08 11:12:16 UTC
# :updated       : 2024-09-24 22:37:47 UTC
# :description   : Packages.

from datetime import (datetime,
                      timezone)
import os
import sqlite3 as sql
import tomllib
import pprint

from command import execute

DB = '/home/ghost/main/ael-files/usr/share/ael/dev/ael-dev.db'

def packages_list(modes=['hyprland', 'i3wm', 'pip']):

    '''
    Generates a list of packages for a given installation mode.
    If no "modes" are given, will give all packages for Hyprland, i3wm and pip.
    '''

    con = sql.connect(DB)
    cur = con.cursor()

    q = f"""SELECT package, mode FROM packages"""
    cur.execute(q)
    records = cur.fetchall()

    records = [(p[0], p[1].split()) for p in records]

    packages = []
    for p in records:
        if set(modes).intersection(p[1]):
            packages.append(p[0])

    return packages

    con.close

def package_info(package):

    package_info = {}

    pkg_Si = execute(f"paru -Si {package}", interact=False).stdout.decode("UTF-8").split("\n")
    for line in pkg_Si:

        # :(* Package name *)
        package_info["name"] = package

        # :(* Package repository *)
        if line.startswith("Repository"):
            package_info["repository"] = line.split(":")[1].strip()

        # :(* Package description *)
        if line.startswith("Description"):
            package_info["description"] = line.split(":")[1].strip() + "."

        # :(* Package URL *)
        if line.startswith("URL"):
            package_info["url"] = line.split(": ")[1]
        if line.startswith("AUR URL"):
            package_info["aur_url"] = line.split(": ")[1]

    if package_info.get('repository') is None:
        pass
        # print(f"{package_info.get('package')}")
    else:
        pass

    pkg_Ql = execute(f"paru -Qlq {package}", interact=False).stdout.decode("UTF-8").split("\n")
    package_Ql_bin = []
    package_Ql_desktop = []
    package_Ql_man = []
    package_Ql_info = []
    for line in pkg_Ql:

        # :(* Package executables *)
        if "/usr/bin/" in line and not line.endswith("/"):
            package_Ql_bin.append(line)

        # :(* Package desktop *)
        if line.endswith(".desktop"):
            package_Ql_desktop.append(line)

        # :(* Package man *)
        if "/man/" in line and line.endswith(".gz"):
            _man = line.split("/")[-1].split(".")
            _man = f"{'.'.join(_man[0:-2])}({_man[-2]})"
            package_Ql_man.append(_man)

        # :(* Info *)
        if "/info/" in line and line.endswith(".gz"):
            _info = line.split("/")[-1].split(".")
            _info = f"{'.'.join(_info[0:-2])}"
            package_Ql_info.append(_info)

        # :(* Is Python? *)
        if "/usr/lib/python" in line:
            package_info["is_python"] = True
            break
        else:
            package_info["is_python"] = False

        # :(* Documentation *)
        if ("/doc/") in line:
            package_info["has_docs"] = True
        else:
            package_info["has_docs"] = False

    package_info["bin"] = package_Ql_bin
    package_info["Ql_desktop"] = package_Ql_desktop
    package_info["Ql_man"] = package_Ql_man
    package_info["Ql_info"] = package_Ql_info

    # :(* modes *)
    # con = sql.connect(DB)
    # cur = con.cursor()
    # q = f"""SELECT mode FROM packages WHERE package == '{package}'"""
    # cur.execute(q)
    # modes = cur.fetchone()

    # package_info["modes"] = modes[0].split(', ')
    # con.close

    return package_info

def generate_packagestoml(modes=['i3wm', 'hyprland', 'pip']):

    pkgs = sorted(packages_list(modes=modes))

    packagestoml = "/home/ghost/main/ael-files/usr/share/ael/packages.toml"

    with open(packagestoml, mode='w') as file_out:
        file_out.write(f"""\
# :----------------------------------------------------------------------- INFO
# :[/usr/share/ael/packages.toml]
# :author        : fantomH @alterEGO Linux
# :created       : 2023-10-22 15:06:13 UTC
# :updated       : {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S %Z')}
# :description   : Packages list (autogenerated by AEL achitect).

# :Technical notes on packages can be found @/usr/share/ael/dev/packages.md

""")

        for pkg in pkgs:
            pkg_info = package_info(pkg)
            try:
                description = pkg_info.get('description').replace('"', f'{chr(92)}"')
            except:
                description = pkg_info.get('description')
            file_out.write(f"""\
[{pkg_info.get('name')}]
repository      = "{pkg_info.get('repository')}"
url             = "{pkg_info.get('url')}"
description     = "{description}"
modes           = {pkg_info.get('modes')}

""")

        file_out.write(f"""\
# :------------------------------------------------------------- FIN ¯\_(ツ)_/¯
""")

def generate_packages_toml():

    f = '/tmp/packages.txt'

    pkg_list = []
    with open(f, mode='r') as INPUT:
        data = INPUT.readlines()

        for pkg in data:
            pkg_list.append(pkg.replace('\n', ''))

    with open('/home/ghost/main/ael-architect/data/packages.toml', mode='w') as OUTPUT:
        OUTPUT.write(f"""\
# :----------------------------------------------------------------------- INFO
# :[ael-architect/data/packages.toml]
# :author        : fantomH @alterEGO Linux
# :created       : 2024-08-29 10:04:28 UTC
# :updated       : {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S %Z')}
# :description   : Packages file.

""")

        for pkg in pkg_list:
            pkg_info = package_info(pkg)
            try:
                description = pkg_info.get('description').replace('"', f'{chr(92)}"')
            except:
                description = pkg_info.get('description')
            OUTPUT.write(f"""\
[{pkg_info.get('name')}]
repository      = "{pkg_info.get('repository')}"
url             = "{pkg_info.get('url')}"
description     = "{description}"
mode            = ['base', 'Hyprland', 'i3wm']
required_by     = []
parent          = []
info            = []

""")


# def packages_diff():

    """
    Checks packages.toml and give a list of packages not yet installed.
    """

    # :TODO Change to global.
    # PACKAGES = os.path.join('/', 'home', 'ghost', 'main', 'ael-files', 'usr', 'share', 'ael', 'packages.toml')

    # with open(PACKAGES, 'rb') as _input:
        # data = tomllib.load(_input)

        # from_PACKAGES = [x for x in data.keys()]
    
    # locally = execute(f"paru -Qq", capture_output=True).stdout.decode("UTF-8").split("\n")

    # return set(from_PACKAGES).difference(locally)

# def pkg_manager(manager='paru', modes=['i3wm', 'hyprland']):

    # :TODO Change to global.
    # PACKAGES = os.path.join('/', 'home', 'ghost', 'main', 'ael-files', 'usr', 'share', 'ael', 'packages.toml')

    # with open(PACKAGES, 'rb') as _input:
        # data = tomllib.load(_input)

        # pkgs = []
        # if manager == 'paru':
            # for pkg in data.keys():
                # print('package:', pkg)
                # print('mode:', modes)
                # print(data.get(pkg))
                # print(data.get(pkg)['modes'])
                # if set(modes).intersection(set(data.get(pkg)['modes'])):
                    # pkgs.append(pkg)
            # pkgs = " ".join(pkgs)
            # print(pkgs)
            # execute(f"paru -S --noconfirm --needed {pkgs}")
        

if __name__ == "__main__":
    pass
